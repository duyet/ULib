"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ulib",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.select","angularFileUpload","angular-loading-bar","toggle-switch","ui.bootstrap.datetimepicker","daterangepicker","dndLists"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("about"),ApplicationConfiguration.registerModule("authors"),ApplicationConfiguration.registerModule("books"),ApplicationConfiguration.registerModule("categories"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("import"),ApplicationConfiguration.registerModule("languages"),ApplicationConfiguration.registerModule("loans"),ApplicationConfiguration.registerModule("publishers"),ApplicationConfiguration.registerModule("reports"),ApplicationConfiguration.registerModule("returns"),ApplicationConfiguration.registerModule("servicelogs"),ApplicationConfiguration.registerModule("services"),ApplicationConfiguration.registerModule("settings"),ApplicationConfiguration.registerModule("students"),ApplicationConfiguration.registerModule("user-managers"),ApplicationConfiguration.registerModule("users"),angular.module("about").config(["$stateProvider",function($stateProvider){$stateProvider.state("pabout",{url:"/pabout",templateUrl:"modules/about/views/about.client.view.html"}).state("about",{url:"/about",templateUrl:"modules/about/views/about.client.view.html"})}]),angular.module("about").controller("AboutController",["$scope",function($scope){}]),angular.module("authors").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAuthors",{url:"/authors",templateUrl:"modules/authors/views/list-authors.client.view.html"}).state("createAuthor",{url:"/authors/create",templateUrl:"modules/authors/views/create-author.client.view.html"}).state("viewAuthor",{url:"/authors/:authorId",templateUrl:"modules/authors/views/view-author.client.view.html"}).state("editAuthor",{url:"/authors/:authorId/edit",templateUrl:"modules/authors/views/edit-author.client.view.html"})}]),angular.module("authors").controller("AuthorsController",["$scope","$stateParams","$location","Authentication","Authors",function($scope,$stateParams,$location,Authentication,Authors){$scope.authentication=Authentication,$scope.create=function(){var author=new Authors({name:this.name,description:this.description});author.$save(function(response){$location.path("authors"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(author){swal({title:"Are you sure?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete",cancelButtonText:"Cancel",closeOnConfirm:!1,closeOnCancel:!0},function(isConfirm){isConfirm?(delete_submit(),swal("Deleted!","Your imaginary file has been deleted.","success")):swal("Cancelled","Your imaginary file is safe :)","error")});var delete_submit=function(){if(author){author.$remove();for(var i in $scope.authors)$scope.authors[i]===author&&$scope.authors.splice(i,1)}else $scope.author&&$scope.author.$remove(function(){$location.path("authors")})}},$scope.update=function(){var author=$scope.author;author.$update(function(){$location.path("authors")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.authors=Authors.query()},$scope.findOne=function(){$scope.author=Authors.get({authorId:$stateParams.authorId})},$scope.go=function(url){$location.path(url)}}]),angular.module("authors").factory("Authors",["$resource",function($resource){return $resource("authors/:authorId",{authorId:"@id"},{update:{method:"PUT"}})}]),angular.module("books").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBooks",{url:"/books",templateUrl:"modules/books/views/list-books.client.view.html"}).state("createBook",{url:"/books/create",templateUrl:"modules/books/views/create-book.client.view.html"}).state("searchBook",{url:"/books/search",templateUrl:"modules/books/views/search-books.client.view.html"}).state("bookReport",{url:"/books/report",templateUrl:"modules/books/views/create-report-book.client.view.html"}).state("viewBook",{url:"/books/:bookId",templateUrl:"modules/books/views/view-book.client.view.html"}).state("editBook",{url:"/books/:bookId/edit",templateUrl:"modules/books/views/edit-book.client.view.html"})}]),angular.module("books").controller("BooksController",["$scope","$stateParams","$location","$upload","$timeout","Authentication","Books","Categories","Languages","Publishers","Authors",function($scope,$stateParams,$location,$upload,$timeout,Authentication,Books,Categories,Languages,Publishers,Authors){$scope.authentication=Authentication,$scope.categories=Categories.query(),$scope.languages=Languages.query(),$scope.publishers=Publishers.query(),$scope.authors=Authors.query(),$scope.currentUrl=$location.absUrl(),$scope.fileReaderSupported=null!=window.FileReader&&(null==window.FileAPI||0!=FileAPI.html5),$scope.available_number,$scope.$watch("number",function(){$scope.available_number=$scope.number}),$scope.initData=function(){},$scope.getCatNameById=function(id){for(var i in $scope.categories)if($scope.categories[i].category_id===id)return $scope.categories[i].name},$scope.getLangById=function(id){for(var i in $scope.languages)if($scope.languages[i].language_id===id)return $scope.languages[i].name},$scope.getPublisherById=function(id){for(var i in $scope.publishers)if($scope.publishers[i].publisher_id===id)return $scope.publishers[i].name},$scope.create=function(){var book=new Books({book_id:this.book_id,category_id:this.category_id,language_id:this.language_id,name:this.name,publisher_id:this.publisher_id,number:this.number,description:this.description,available_number:this.available_number,image:$scope.image_url||"",status:this.status});book.$save(function(response){$location.path("books"),$scope.name=""},function(errorResponse){var errors=errorResponse.data.message.filter(function(item,pos){return errorResponse.data.message.indexOf(item)==pos});$scope.error=errors.join("<br>")})},$scope.remove=function(book){if(book){book.$remove();for(var i in $scope.books)$scope.books[i]===book&&$scope.books.splice(i,1)}else $scope.book.$remove(function(){$location.path("books")})},$scope.update=function(){var book=$scope.book;book.$update(function(){$location.path("books/"+book.id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.books=Books.query()},$scope.findOne=function(){$scope.book=Books.get({bookId:$stateParams.bookId})},$scope.loadAuthors=function(query){return $scope.authors},$scope.go=function(path){$location.path(path)},$scope.$watch("image_upload",function(){$scope.upload($scope.image_upload)}),$scope.upload=function(files){if(files&&files.length)for(var i=0;i<files.length;i++){var file=files[i];$scope.uploadStatus=!1,$upload.upload({url:"books/image_upload",fields:{},file:file}).progress(function(evt){var progressPercentage=parseInt(100*evt.loaded/evt.total);$scope.uploadStatus="Uploading "+progressPercentage+"%",console.log("progress: "+progressPercentage+"% "+evt.config.file.name)}).success(function(data,status,headers,config){console.log("file "+config.file.name+"uploaded. Response: "+data),$scope.image_url=data})}},$scope.generateThumb=function(file){null!=file&&$scope.fileReaderSupported&&file.type.indexOf("image")>-1&&$timeout(function(){var fileReader=new FileReader;fileReader.readAsDataURL(file),fileReader.onload=function(e){$timeout(function(){file.dataUrl=e.target.result})}})}}]),angular.module("books").factory("Books",["$resource",function($resource){return $resource("books/:bookId",{bookId:"@id"},{update:{method:"PUT"}})}]),angular.module("categories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCategories",{url:"/categories",templateUrl:"modules/categories/views/list-categories.client.view.html"}).state("searchCategories",{url:"/categories/search",templateUrl:"modules/categories/views/search-categories.client.view.html"}).state("createCategory",{url:"/categories/create",templateUrl:"modules/categories/views/create-category.client.view.html"}).state("importCategory",{url:"/categories/import",templateUrl:"modules/categories/views/import-category.client.view.html"}).state("viewCategory",{url:"/categories/:categoryId",templateUrl:"modules/categories/views/view-category.client.view.html"}).state("editCategory",{url:"/categories/:categoryId/edit",templateUrl:"modules/categories/views/edit-category.client.view.html"})}]),angular.module("categories").controller("CategoriesController",["$scope","$stateParams","$timeout","$location","$upload","Authentication","Categories","Books",function($scope,$stateParams,$timeout,$location,$upload,Authentication,Categories,Books){$scope.authentication=Authentication,$scope.fileReaderSupported=null!=window.FileReader&&(null==window.FileAPI||0!=FileAPI.html5),$scope.books=Books.query(),$scope.create=function(){var loanTime=Number.parseInt($scope.loan_time);if(!this.name)return swal("Error","Vui lòng điền loại danh mục","error");if(!loanTime||0>=loanTime)return swal("Error","Vui lòng điền chính xác thời hạn mượn","error");var category=new Categories({name:this.name,description:this.description,loan_time:loanTime});category.$save(function(response){return $location.path("categories"),$scope.name="",swal("Success!","","success")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.$watch("fileimport",function(){$scope.fileimport&&$scope.fileimport.length>0&&$scope.fileimport[0].name.length>0&&($scope.uploadBtnStatus=$scope.fileimport[0].name)}),$scope["import"]=function(){return $scope.fileimport&&0!=$scope.fileimport.length?($scope.uploadStatus="",void $upload.upload({url:"categories/import",fields:{},file:$scope.fileimport}).progress(function(evt){var progressPercentage=parseInt(100*evt.loaded/evt.total);$scope.uploadStatus="Uploading "+progressPercentage+"%",100==progressPercentage&&($scope.uploadStatus="Importing ..."),console.log("progress: "+progressPercentage+"% "+evt.config.file.name)}).success(function(data,status,headers,config){console.log(data,status,headers,config),$scope.uploadStatus="",$scope.success=data}).error(function(err){$scope.error=err.message})):($scope.error="Please choose import file.",!1)},$scope.remove=function(category){swal({title:"Are you sure?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete",cancelButtonText:"Cancel",closeOnConfirm:!1,closeOnCancel:!0},function(isConfirm){isConfirm&&delete_submit()});var delete_submit=function(){category?category.$remove(function(){for(var i in $scope.categories)$scope.categories[i]===category&&$scope.categories.splice(i,1);swal("","Deleted!.","success")},function(){swal("","Deleted!.","success")}):$scope.category.$remove(function(){$location.path("categories")})}},$scope.update=function(){var loanTime=Number.parseInt($scope.category.loan_time);if(!this.category.name)return swal("Error","Vui lòng điền loại danh mục","error");if(!loanTime||0>=loanTime)return swal("Error","Vui lòng điền chính xác thời hạn mượn","error");var category=$scope.category;console.log(category),category.$update(function(){return $location.path("categories"),swal("Updated!","","success")},function(errorResponse){return swal("",errorResponse.data.message,"error")})},$scope.find=function(){$scope.categories=Categories.query()},$scope.findOne=function(){$scope.category=Categories.get({categoryId:$stateParams.categoryId})},$scope.go=function(url){$location.path(url)},$scope.$watch("image_upload",function(){$scope.upload($scope.image_upload)}),$scope.upload=function(files){if(files&&files.length)for(var i=0;i<files.length;i++){var file=files[i];$scope.uploadStatus=!1,$upload.upload({url:"books/image_upload",fields:{},file:file}).progress(function(evt){var progressPercentage=parseInt(100*evt.loaded/evt.total);$scope.uploadStatus="Uploading "+progressPercentage+"%",console.log("progress: "+progressPercentage+"% "+evt.config.file.name)}).success(function(data,status,headers,config){console.log("file "+config.file.name+"uploaded. Response: "+data),$scope.image_url=data})}},$scope.generateThumb=function(file){null!=file&&$scope.fileReaderSupported&&file.type.indexOf("image")>-1&&$timeout(function(){var fileReader=new FileReader;fileReader.readAsDataURL(file),fileReader.onload=function(e){$timeout(function(){file.dataUrl=e.target.result})}})}}]),angular.module("categories").factory("Categories",["$resource",function($resource){return $resource("categories/:categoryId",{categoryId:"@category_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("commingSoon",{url:"/commingsoon",templateUrl:"modules/core/views/commingsoon.client.view.html"}).state("searches",{url:"/searches",templateUrl:"modules/core/views/searches.client.view.html"}).state("info",{url:"/info",templateUrl:"modules/core/views/info.client.view.html"}).state("help",{url:"/help",templateUrl:"modules/core/views/help.client.view.html"})}]),angular.module("core").run(["Menus",function(Menus){Menus.addMenuItem("topbar",'<i class="md md-home"></i> Home',"main-page","/"),Menus.addMenuItem("topbar",'<i class="md md-loop"></i> Nghiệp vụ',"main-service","dropdown","#"),Menus.addSubMenuItem("topbar","main-service","Mượn sách","loans/create"),Menus.addSubMenuItem("topbar","main-service","Trả sách","returns/create"),Menus.addSubMenuItem("topbar","main-service","Tra cứu","searches"),Menus.addSubMenuItem("topbar","main-service","Dịch vụ","servicelogs/create"),Menus.addMenuItem("topbar",'<i class="md md-book"></i> Quản lý danh mục',"main-categories","dropdown","#"),Menus.addSubMenuItem("topbar","main-categories","Books","books"),Menus.addSubMenuItem("topbar","main-categories","Authors","authors"),Menus.addSubMenuItem("topbar","main-categories","Publishers","publishers"),Menus.addSubMenuItem("topbar","main-categories","Book Categories","categories"),Menus.addSubMenuItem("topbar","main-categories","Book Languages","languages"),Menus.addSubMenuItem("topbar","main-categories","Các dịch vụ","services"),Menus.addMenuItem("topbar",'<i class="md md-search"></i> Tra cứu',"main-search","dropdown","#"),Menus.addSubMenuItem("topbar","main-search","Mượn quá hạn","reports/loan_out_of_date"),Menus.addSubMenuItem("topbar","main-search","Thông tin sách","books/search"),Menus.addSubMenuItem("topbar","main-search","Thông tin mượn sách","loans"),Menus.addSubMenuItem("topbar","main-search","Danh mục","categories/search"),Menus.addSubMenuItem("topbar","main-search","Danh sách SV","students"),Menus.addSubMenuItem("topbar","main-search","Nhật kí hệ thống","systemlogs"),Menus.addMenuItem("topbar",'<i class="md md-assessment"></i> Báo cáo',"main-report","dropdown","#"),Menus.addSubMenuItem("topbar","main-report","Phiếu mượn","reports/loans"),Menus.addSubMenuItem("topbar","main-report","Phiếu trả","reports/loans"),Menus.addSubMenuItem("topbar","main-report","Doanh thu dịch vụ","reports/income"),Menus.addSubMenuItem("topbar","main-report","Mượn quá hạn","reports/loan_out_of_date"),Menus.addSubMenuItem("topbar","main-report","Thống kê danh mục","reports/categories"),Menus.addSubMenuItem("topbar","main-report","Thống kê sách","reports/books"),Menus.addSubMenuItem("topbar","main-report","Thống kê NXB","reports/publishers"),Menus.addSubMenuItem("topbar","main-report","Thống kê tác giả","reports/authors"),Menus.addSubMenuItem("topbar","main-report","Phiếu phạt","commingsoon"),Menus.addMenuItem("topbar",'<i class="md md-settings"></i> Hệ thống',"main-system","dropdown","#"),Menus.addSubMenuItem("topbar","main-system","Thiết lập chung","settings/general"),Menus.addSubMenuItem("topbar","main-system","Các quy định","settings/library"),Menus.addMenuItem("topbar",'<i class="md md-account-box"></i> Tài khoản',"main-user","dropdown","#"),Menus.addSubMenuItem("topbar","main-user","Quản lý tài khoản","user-managers"),Menus.addSubMenuItem("topbar","main-user","Quản lý nhóm","groups"),Menus.addSubMenuItem("topbar","main-user","Phân quyền","commingsoon"),Menus.addMenuItem("topbar",'<i class="md md-info-outline"></i> Khác',"main-other","dropdown","#"),Menus.addSubMenuItem("topbar","main-other","Thông tin","info"),Menus.addSubMenuItem("topbar","main-other","Trợ giúp","help")}]),angular.module("core").run(["$rootScope","$location","Authentication",function($rootScope,$location,Authentication){$rootScope.$on("$routeChangeStart",function(event){Authentication.isAuthorized||$location.path("signin")})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1,$("#side-menu").metisMenu()})}]),angular.module("core").controller("HomeController",["$scope","$location","Authentication",function($scope,$location,Authentication){$scope.authentication=Authentication,console.log(Authentication),$scope.go=function(url){$location.path(url)}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",["$scope","$stateParams","$location","Authentication","Groups","UserManagers",function($scope,$stateParams,$location,Authentication,Groups,UserManagers){$scope.authentication=Authentication,$scope.$watch("models",function(model){$scope.modelAsJson=angular.toJson(model,!0)},!0),$scope.go=function(path){$location.path(path)},$scope.create=function(){var group=new Groups({name:this.name,description:this.description});group.$save(function(response){$location.path("groups/"+response.id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(group){if(group){group.$remove();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){$location.path("groups/"+group.id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.groups=Groups.query()},$scope.getListStaff=function(){$scope.staffs=UserManagers.query()},$scope.findOne=function(){$scope.group=Groups.get({groupId:$stateParams.groupId})}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@id"},{update:{method:"PUT"}})}]),angular.module("import").config(["$stateProvider",function($stateProvider){$stateProvider.state("import",{url:"/import",templateUrl:"modules/import/views/import.client.view.html"}).state("importForModule",{url:"/books/:module",templateUrl:"modules/import/views/import-module.client.view.html"})}]),angular.module("import").controller("ImportController",["$scope",function($scope){}]),angular.module("languages").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLanguages",{url:"/languages",templateUrl:"modules/languages/views/list-languages.client.view.html"}).state("createLanguage",{url:"/languages/create",templateUrl:"modules/languages/views/create-language.client.view.html"}).state("viewLanguage",{url:"/languages/:languageId",templateUrl:"modules/languages/views/view-language.client.view.html"}).state("editLanguage",{url:"/languages/:languageId/edit",templateUrl:"modules/languages/views/edit-language.client.view.html"})}]),angular.module("languages").controller("LanguagesController",["$scope","$stateParams","$location","Authentication","Languages",function($scope,$stateParams,$location,Authentication,Languages){$scope.authentication=Authentication,$scope.create=function(){var language=new Languages({name:this.name,description:this.description});language.$save(function(response){$location.path("languages"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(language){if(language){language.$remove();for(var i in $scope.languages)$scope.languages[i]===language&&$scope.languages.splice(i,1)}else $scope.language.$remove(function(){$location.path("languages")})},$scope.update=function(){var language=$scope.language;language.$update(function(){$location.path("languages")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.languages=Languages.query()},$scope.findOne=function(){$scope.language=Languages.get({languageId:$stateParams.languageId})},$scope.go=function(url){$location.path(url)}}]),angular.module("languages").factory("Languages",["$resource",function($resource){return $resource("languages/:languageId",{languageId:"@id"},{update:{method:"PUT"}})}]),angular.module("loans").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLoans",{url:"/loans",templateUrl:"modules/loans/views/list-loans.client.view.html"}).state("createLoan",{url:"/loans/create",templateUrl:"modules/loans/views/create-loan.client.view.html"}).state("preoderLoan",{url:"/loans/preoder",templateUrl:"modules/loans/views/preoder-loan.client.view.html"}).state("viewLoan",{url:"/loans/:loanId",templateUrl:"modules/loans/views/view-loan.client.view.html"}).state("editLoan",{url:"/loans/:loanId/edit",templateUrl:"modules/loans/views/edit-loan.client.view.html"})}]),angular.module("loans").controller("LoansController",["$scope","$resource","$filter","$stateParams","$location","Authentication","Loans","Books","Students",function($scope,$resource,$filter,$stateParams,$location,Authentication,Loans,Books,Students){$scope.authentication=Authentication,$scope.isChooseBookActive=!1,$scope.selectedBook=[],$scope.createData={},$scope.librules={},$scope.librules.min_number_of_books=100,$scope.canBooking=!0,$scope.debug=!1,$scope.fetchStudentData=function(){var uid=$scope.student_id_input;return $scope.student_info=!1,uid.toString().length>8?(console.error("Length > 8",uid),$scope.student_info=!1,!1):uid.toString().length<6?(console.error("Length < 6",uid),!1):(console.error("Got here",uid),void Students.get({studentId:uid},function(u){u&&($scope.listBookNotReturnedByUid=!1,$scope.canBooking=!0,$scope.createData.student=$scope.student_info=u,u&&$scope.fetchNotReturnBooks(uid))}))},$scope.fetchNotReturnBooks=function(uid){$scope.canBooking=!0,$resource("loans/list_not_return").query({student_id:uid},function(data){data&&data.length?($scope.listBookNotReturnedByUid=data,$scope.canBooking=!1):$scope.listBookNotReturnedByUid=!1})},$scope.chooseBook=function(){return $scope.isChooseBookActive=!0},$scope.isEmptyResult=!1,$scope.searchBook=function(){$scope.fiteredBooks=[],$scope.isEmptyResult=!1;var keyword=$scope.searchByKeyword||"";return $scope.canBooking?keyword.toString().length>0?void $resource("books/search").query({keyword:keyword},function(books){console.log(books),books&&0==books.length&&($scope.isEmptyResult=!0),$scope.fiteredBooks=books}):swal("","Vui lòng nhập mã sách hoặc tên sách","error"):swal("","Sinh viên chưa trả sách, không thể lập phiếu mượn mới","error")},$scope.selectBook=function(b){if(!b)return!1;if(!b.can_booking)return swal({title:"Lập phiếu đặt trước?",text:"Sách dưới ngưỡng tồn nên k thể mượn, lập phiếu đặt trước cho sách này?",type:"warning",showCancelButton:!0,confirmButtonColor:"#11ABEF",confirmButtonText:"Đặt",cancelButtonText:"Hủy",closeOnConfirm:!1,closeOnCancel:!1},function(isConfirm){return isConfirm?void $location.path("loans/preoder"):swal("","Không thể mượn, số lượng sách đang dưới mức tồn kho quy định!","error")});for(var i in $scope.fiteredBooks)$scope.fiteredBooks[i]===b&&$scope.fiteredBooks.splice(i,1);var isExists=!1;for(var i in $scope.selectedBook)$scope.selectedBook[i].book_id===b.book_id&&(isExists=!0);isExists||$scope.selectedBook.push(b)},$scope.removeBookFromSelectedList=function(b){if(!b)return!1;for(var i in $scope.selectedBook)$scope.selectedBook[i]===b&&$scope.selectedBook.splice(i,1)},$scope.create=function(){if(!$scope.canBooking)return swal("","Sinh viên chưa trả sách, không thể lập phiếu mượn mới","error");if(!$scope.createData.student)return swal("","Vui lòng nhập thông tin sinh viên","error");if(!$scope.selectedBook.length)return swal("","Vui lòng chọn sách cần mượn","error");$scope.createData.books=$scope.selectedBook,$scope.createData.created=new Date,console.log("Init to create with data: ",$scope.createData);var loan=new Loans($scope.createData);loan.$save(function(response){return $location.path("loans/"+response.insertId),swal("","Thành công","success")},function(errorResponse){return $scope.error=errorResponse.data.message,swal("",$scope.error,"error")})},$scope.remove=function(loan){if(loan){loan.$remove();for(var i in $scope.loans)$scope.loans[i]===loan&&$scope.loans.splice(i,1)}else $scope.loan.$remove(function(){$location.path("loans")})},$scope.update=function(){var loan=$scope.loan;loan.$update(function(){$location.path("loans/"+loan._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.loans=Loans.query()},$scope.findOne=function(){$scope.loan=Loans.get({loanId:$stateParams.loanId}),console.log($scope.loan)},$scope.go=function(url){$location.path(url)}}]),angular.module("loans").factory("Loans",["$resource",function($resource){return $resource("loans/:loanId",{loanId:"@id"},{update:{method:"PUT"}})}]),angular.module("publishers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPublishers",{url:"/publishers",templateUrl:"modules/publishers/views/list-publishers.client.view.html"}).state("createPublisher",{url:"/publishers/create",templateUrl:"modules/publishers/views/create-publisher.client.view.html"}).state("viewPublisher",{url:"/publishers/:publisherId",templateUrl:"modules/publishers/views/view-publisher.client.view.html"}).state("editPublisher",{url:"/publishers/:publisherId/edit",templateUrl:"modules/publishers/views/edit-publisher.client.view.html"})}]),angular.module("publishers").controller("PublishersController",["$scope","$stateParams","$location","Authentication","Publishers",function($scope,$stateParams,$location,Authentication,Publishers){$scope.authentication=Authentication,$scope.create=function(){var publisher=new Publishers({name:this.name,description:this.description});publisher.$save(function(response){return $location.path("publishers"),$scope.name="",$scope.description="",swal("Success!","","success")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(publisher){swal({title:"Are you sure?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete",cancelButtonText:"Cancel",closeOnConfirm:!1,closeOnCancel:!0},function(isConfirm){isConfirm&&(delete_submit(),swal("Deleted!","Your imaginary file has been deleted.","success"))});var delete_submit=function(){if(publisher){publisher.$remove();for(var i in $scope.publishers)$scope.publishers[i]===publisher&&$scope.publishers.splice(i,1)}else $scope.publisher.$remove(function(){$location.path("publishers")})}},$scope.update=function(){var publisher=$scope.publisher;publisher.$update(function(){return $location.path("publishers"),swal("Updated!","","success")},function(errorResponse){return swal("",errorResponse.data.message,"error")})},$scope.find=function(){$scope.publishers=Publishers.query()},$scope.findOne=function(){$scope.publisher=Publishers.get({publisherId:$stateParams.publisherId})},$scope.go=function(url){$location.path(url)}}]),angular.module("publishers").factory("Publishers",["$resource",function($resource){return $resource("publishers/:publisherId",{
publisherId:"@publisher_id"},{update:{method:"PUT"}})}]),angular.module("reports").config(["$stateProvider",function($stateProvider){$stateProvider.state("listReports",{url:"/reports",templateUrl:"modules/reports/views/list-reports.client.view.html"}).state("loanReports",{url:"/reports/loans",templateUrl:"modules/reports/views/loans-reports.client.view.html"}).state("reportLoanOutOfDate",{url:"/reports/loan_out_of_date",templateUrl:"modules/reports/views/loanoutofdate-report.client.view.html"}).state("reportsCategories",{url:"/reports/categories",templateUrl:"modules/reports/views/categories-report.client.view.html"}).state("reportsBooks",{url:"/reports/books",templateUrl:"modules/reports/views/books-report.client.view.html"}).state("reportsPublisher",{url:"/reports/publishers",templateUrl:"modules/reports/views/publishers-report.client.view.html"}).state("reportsAuthor",{url:"/reports/authors",templateUrl:"modules/reports/views/authors-report.client.view.html"}).state("reportsIncome",{url:"/reports/income",templateUrl:"modules/reports/views/income-report.client.view.html"}).state("viewReport",{url:"/reports/:reportId",templateUrl:"modules/reports/views/view-report.client.view.html"}).state("editReport",{url:"/reports/:reportId/edit",templateUrl:"modules/reports/views/edit-report.client.view.html"})}]),angular.module("reports").filter("range",function(){return function(input,total){total=parseInt(total);for(var i=1;total>i;i++)input.push(i);return input}}),angular.module("reports").controller("ReportsController",["$scope","$resource","$stateParams","$location","Authentication","Reports",function($scope,$resource,$stateParams,$location,Authentication,Reports){$scope.authentication=Authentication,$scope.report={},$scope.isLoading=!0,$scope.currentMonth=(new Date).getMonth()+1,$scope.getDatetime=new Date,$scope.reportCategories=function(month){var param={};month&&(param.month=month),$scope.isLoading=!0,$scope.report.total_book_loan=0,$resource("reports/categories").query(param,function(data){$scope.report.categories=data;for(var i=0;i<data.length;i++)$scope.report.total_book_loan+=data[i].num;$scope.isLoading=!1})},$scope.reportBooks=function(month){var param={};month&&(param.month=month),$scope.isLoading=!0,$scope.report.total_book_loan=0,$resource("reports/books").query(param,function(data){$scope.report.books=data;for(var i=0;i<data.length;i++)console.info(data[i]),$scope.report.total_book_loan+=data[i].num;$scope.rating=[],$scope.isLoading=!1})},$scope.reportAuthors=function(month){var param={};month&&(param.month=month),$scope.isLoading=!0,$scope.report.total_book_loan=0,$resource("reports/authors").query(param,function(data){$scope.report.authors=data;for(var i=0;i<data.length;i++)console.info(data[i]),$scope.report.total_book_loan+=data[i].num;$scope.rating=[],$scope.isLoading=!1})},$scope.reportLoanOutOfDate=function(month){var param={};month&&(param.month=month),$scope.isLoading=!0,$scope.report.total_book_loan=0,$resource("reports/loan_out_of_date").query(param,function(data){$scope.report.books=data;for(var i=0;i<data.length;i++)console.info(data[i]),$scope.report.total_book_loan+=data[i].num;$scope.rating=[],$scope.isLoading=!1})},$scope.reportPublishers=function(month){var param={};month&&(param.month=month),$scope.isLoading=!0,$scope.report.total_book_loan=$scope.publishers_total_loan_counter=$scope.publishers_total_book_counter=0,$resource("reports/publishers").query(param,function(data){$scope.report.publishers=data;for(var i=0;i<data.length;i++)console.info(data[i]),$scope.publishers_total_book_counter+=data[i].book_counter,$scope.publishers_total_loan_counter+=data[i].loan_counter;$scope.rating=[],$scope.isLoading=!1})},$scope.isMonthFilter=!0,$scope.loanDataRange={startDate:null,endDate:null},$scope.reportLoans=function(month){var param={};0==$scope.isMonthFilter?(param.start_date=$scope.loanDataRange.startDate,param.end_date=$scope.loanDataRange.endDate):month&&(param.month=month),$scope.isLoading=!0,$scope.total_loans=0,$resource("reports/loans").query(param,function(data){$scope.report.loans=data;for(var i=0;i<data.length;i++)console.info(data[i]);$scope.rating=[],$scope.isLoading=!1})};var getDateFormated=function(string){var today=new Date(string);if(!today)return!1;var dd=today.getDate(),mm=today.getMonth()+1,yyyy=today.getFullYear();10>dd&&(dd="0"+dd),10>mm&&(mm="0"+mm);var today=yyyy+"-"+mm+"-"+dd;return today};$scope.report.income=[],$scope.reportIncome=function(){$scope.isLoading=!0;var param={};$scope.loanDataRange.startDate&&$scope.loanDataRange.endDate&&(param.start_date=getDateFormated($scope.loanDataRange.startDate),param.end_date=getDateFormated($scope.loanDataRange.endDate)),$scope.total_income=0,$resource("reports/income").query(param,function(data){$scope.report.income=data;for(var i=0;i<data.length;i++)$scope.total_income+=data[i].prices;$scope.isLoading=!1})},$scope.$watch("loanDataRange",function(){$scope.reportIncome()},!0),$scope.create=function(){var report=new Reports({name:this.name});report.$save(function(response){$location.path("reports/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(report){if(report){report.$remove();for(var i in $scope.reports)$scope.reports[i]===report&&$scope.reports.splice(i,1)}else $scope.report.$remove(function(){$location.path("reports")})},$scope.update=function(){var report=$scope.report;report.$update(function(){$location.path("reports/"+report._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.reports=Reports.query()},$scope.findOne=function(){$scope.report=Reports.get({reportId:$stateParams.reportId})}}]),angular.module("reports").factory("Reports",["$resource",function($resource){return $resource("reports/:reportId",{reportId:"@_id"},{update:{method:"PUT"}})}]),angular.module("returns").config(["$stateProvider",function($stateProvider){$stateProvider.state("listReturns",{url:"/returns",templateUrl:"modules/returns/views/list-returns.client.view.html"}).state("createReturn",{url:"/returns/create",templateUrl:"modules/returns/views/create-returns.client.view.html"}).state("viewReturn",{url:"/returns/:loanId",templateUrl:"modules/returns/views/view-loan.client.view.html"}).state("editReturn",{url:"/returns/:loanId/edit",templateUrl:"modules/returns/views/edit-loan.client.view.html"}).state("listNotReturn",{url:"/returns/outofdate",templateUrl:"modules/returns/views/list-outofdate.client.view.html"})}]),angular.module("returns").controller("ReturnsController",["$scope","$resource","$filter","$stateParams","$location","Authentication","Returns","Books","Students",function($scope,$resource,$filter,$stateParams,$location,Authentication,Returns,Books,Students){$scope.authentication=Authentication,$scope.student_info=!1,$scope.createData={},$scope.loan_detail=!1,$scope.isNotLoan=!1,$scope.fetchStudentData=function(){var uid=$scope.student_id||0;return $scope.student_info=!1,uid.toString().length>8?($scope.student_info=!1,!1):uid.toString().length<6?!1:void Students.get({studentId:uid},function(u){u&&($scope.createData.student=$scope.student_info=u,$scope.fetchLoanDetail(u.student_id))})},$scope.fetchLoanDetail=function(student_id){$scope.loan_details={},$scope.isNotLoan=!1,$resource("loans/list_not_return").query({student_id:student_id},function(data){data?(console.error(data),$scope.loan_details.loan_id=data[0].loan_id||0,$scope.loan_details.time_created=data[0].time_created||"",$scope.loan_details.data=data):$scope.isNotLoan=!0})},$scope.returnSubmit=function(){$scope.success=!1;var list_book_return=[];return $scope.loan_details.data.forEach(function(loan){loan.is_selected===!0&&list_book_return.push(loan.book_id)}),list_book_return?void $resource("loans/return_book_submit").post({books:list_book_return,loan_id:$scope.loan_details.loan_id},function(data){data?$scope.success="Thành công":$scope.error="Some thing was wrong~~"}):swal("","Vui lòng chọn ít nhất 1 quyển","error")},$scope.outofdatelist=[],$scope.findOutOfDateList=function(){$scope.outofdatelist=$resource("loans/out_of_date").query()},$scope.create=function(){return $scope.createData.student?$scope.selectedBook.length?($scope.createData.books=$scope.selectedBook,$scope.createData.created=new Date,void console.log("Init to create with data: ",$scope.createData)):swal("","Vui lòng chọn sách cần mượn","error"):swal("","Vui lòng nhập thông tin sinh viên","error")},$scope.remove=function(){},$scope.update=function(){},$scope.find=function(){},$scope.findOne=function(){},$scope.go=function(url){$location.path(url)}}]),angular.module("returns").factory("Returns",["$resource",function($resource){return $resource("returns/:returnId",{returnId:"@id"},{update:{method:"PUT"}})}]),angular.module("servicelogs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServicelogs",{url:"/servicelogs",templateUrl:"modules/servicelogs/views/list-servicelogs.client.view.html"}).state("createServicelog",{url:"/servicelogs/create",templateUrl:"modules/servicelogs/views/create-servicelog.client.view.html"}).state("viewServicelog",{url:"/servicelogs/:servicelogId",templateUrl:"modules/servicelogs/views/view-servicelog.client.view.html"}).state("editServicelog",{url:"/servicelogs/:servicelogId/edit",templateUrl:"modules/servicelogs/views/edit-servicelog.client.view.html"})}]),angular.module("servicelogs").controller("ServicelogsController",["$scope","$stateParams","$location","Authentication","Servicelogs","Services",function($scope,$stateParams,$location,Authentication,Servicelogs,Services){$scope.authentication=Authentication,console.log($scope.authentication),$scope.services=Services.query(function(data){$scope.service_id=data[0].id}),$scope.create=function(){var servicelog=new Servicelogs({service_id:this.service_id,prices:this.prices,note:this.note,staff_id:$scope.authentication.user.id});servicelog.$save(function(response){return $location.path("servicelogs"),$scope.name="",swal("Success!","","success")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.viewServiceInfo=function(serviceData){$scope.serviceInfo=serviceData,$("#serviceInfo").modal("show")},$scope.remove=function(servicelog){if(servicelog){servicelog.$remove();for(var i in $scope.servicelogs)$scope.servicelogs[i]===servicelog&&$scope.servicelogs.splice(i,1)}else $scope.servicelog.$remove(function(){$location.path("servicelogs")})},$scope.update=function(){var servicelog=$scope.servicelog;servicelog.$update(function(){$location.path("servicelogs")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.servicelogs=Servicelogs.query()},$scope.findOne=function(){$scope.servicelog=Servicelogs.get({servicelogId:$stateParams.servicelogId})},$scope.go=function(url){$location.path(url)}}]),angular.module("servicelogs").factory("Servicelogs",["$resource",function($resource){return $resource("servicelogs/:servicelogId",{servicelogId:"@id"},{update:{method:"PUT"}})}]),angular.module("services").config(["$stateProvider",function($stateProvider){$stateProvider.state("listServices",{url:"/services",templateUrl:"modules/services/views/list-services.client.view.html"}).state("createServices",{url:"/services/create",templateUrl:"modules/services/views/create-services.client.view.html"}).state("viewServices",{url:"/services/:serviceId",templateUrl:"modules/services/views/view-services.client.view.html"}).state("editServices",{url:"/services/:serviceId/edit",templateUrl:"modules/services/views/edit-services.client.view.html"})}]),angular.module("services").controller("ServicesController",["$scope","$stateParams","$location","Authentication","Services",function($scope,$stateParams,$location,Authentication,Services){$scope.authentication=Authentication,$scope.create=function(){var service=new Services({name:this.name,description:this.description});service.$save(function(response){return $location.path("services"),$scope.name="",$scope.description="",swal("Success!","","success")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(service){if(service){service.$remove();for(var i in $scope.services)$scope.services[i]===service&&$scope.services.splice(i,1)}else $scope.service.$remove(function(){$location.path("services")})},$scope.update=function(){var service=$scope.service;service.$update(function(){return $location.path("services"),swal("Updated!","","success")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.services=Services.query()},$scope.findOne=function(){$scope.service=Services.get({serviceId:$stateParams.serviceId})}}]),angular.module("services").factory("Services",["$resource",function($resource){return $resource("services/:serviceId",{serviceId:"@id"},{update:{method:"PUT"}})}]),angular.module("settings").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSettings",{url:"/settings",templateUrl:"modules/settings/views/list-settings.client.view.html"}).state("generalSetting",{url:"/settings/general",templateUrl:"modules/settings/views/general-setting.client.view.html"}).state("libSetting",{url:"/settings/library",templateUrl:"modules/settings/views/library-setting.client.view.html"}).state("debugSetting",{url:"/settings/debug",templateUrl:"modules/settings/views/debug-setting.client.view.html"})}]),angular.module("settings").controller("LibSettingsController",["$scope","$resource","$stateParams","$location","Authentication","Settings",function($scope,$resource,$stateParams,$location,Authentication,Settings){$scope.authentication=Authentication,$scope.librule=[],$scope.generalsettings=[],$scope.remove=function(setting){if(setting){setting.$remove();for(var i in $scope.settings)$scope.settings[i]===setting&&$scope.settings.splice(i,1)}else $scope.setting.$remove(function(){$location.path("settings")})},$scope.update=function(){var setting=$scope.setting;setting.$update(function(){$location.path("settings/"+setting.id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){console.log("Find()"),$scope.settings=Settings.query()},$scope.loadLibRule=function(){$resource("/settings/librules").query(function(data){$scope.librules=data})},$scope.loadGenerateSettings=function(){$resource("/settings").query(function(data){$scope.generalsettings=data})},$scope.findOne=function(){$scope.setting=Settings.get({settingId:$stateParams.settingId})}}]),angular.module("settings").factory("Settings",["$resource",function($resource){return $resource("settings/:settingId",{settingId:"@id"},{update:{method:"PUT"}})}]),angular.module("students").config(["$stateProvider",function($stateProvider){$stateProvider.state("listStudents",{url:"/students",templateUrl:"modules/students/views/list-students.client.view.html"}).state("createStudent",{url:"/students/create",templateUrl:"modules/students/views/create-student.client.view.html"}).state("importStudent",{url:"/students/import",templateUrl:"modules/students/views/import-student.client.view.html"}).state("viewStudent",{url:"/students/:studentId",templateUrl:"modules/students/views/view-student.client.view.html"}).state("editStudent",{url:"/students/:studentId/edit",templateUrl:"modules/students/views/edit-student.client.view.html"})}]),angular.module("students").controller("StudentsController",["$scope","$stateParams","$location","$upload","Authentication","Students",function($scope,$stateParams,$location,$upload,Authentication,Students){$scope.authentication=Authentication,$scope.currentUrl=$location.absUrl(),$scope.create=function(){var student=new Students({uid:this.student_id,name:this.name,subject:this.subject,sex:this.sex,email:this.email});student.$save(function(response){$location.path("students"),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.$watch("fileimport",function(){$scope.fileimport&&$scope.fileimport.length>0&&$scope.fileimport[0].name.length>0&&($scope.uploadBtnStatus=$scope.fileimport[0].name)}),$scope["import"]=function(){return $scope.fileimport&&0!=$scope.fileimport.length?($scope.uploadStatus="",void $upload.upload({url:"students/import",fields:{},file:$scope.fileimport}).progress(function(evt){var progressPercentage=parseInt(100*evt.loaded/evt.total);$scope.uploadStatus="Uploading "+progressPercentage+"%",100==progressPercentage&&($scope.uploadStatus="Importing ..."),console.log("progress: "+progressPercentage+"% "+evt.config.file.name)}).success(function(data,status,headers,config){console.log(data,status,headers,config),$scope.uploadStatus="",$scope.success=data}).error(function(err){$scope.error=err.message})):($scope.error="Please choose import file.",!1)},$scope.remove=function(student){if(student){student.$remove();for(var i in $scope.students)$scope.students[i]===student&&$scope.students.splice(i,1)}else $scope.student.$remove(function(){$location.path("students")})},$scope.update=function(){var student=$scope.student;console.log(student),student.$update(function(){$location.path("students/"+student.student_id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.students=Students.query()},$scope.findOne=function(){$scope.student=Students.get({studentId:$stateParams.studentId})},$scope.loanByStudent=function(){if($scope.loans=[],!$scope.student)return!1;var uid=$scope.student.student_id;$resource("loans/loan_by_student").query({student_id:uid},function(data){$scope.loans=data})},$scope.go=function(url){$location.path(url)}}]),angular.module("students").factory("Students",["$resource",function($resource){return $resource("students/:studentId",{studentId:"@student_id"},{update:{method:"PUT"}})}]),angular.module("user-managers").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("user-managers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listUserManagers",{url:"/user-managers",templateUrl:"modules/user-managers/views/list-user-managers.client.view.html"}).state("createUserManager",{url:"/user-managers/create",templateUrl:"modules/user-managers/views/create-user-manager.client.view.html"}).state("viewUserManager",{url:"/user-managers/:userManagerId",templateUrl:"modules/user-managers/views/view-user-manager.client.view.html"}).state("editUserManager",{url:"/user-managers/:userManagerId/edit",templateUrl:"modules/user-managers/views/edit-user-manager.client.view.html"})}]),angular.module("user-managers").controller("UserManagersController",["$scope","$stateParams","$location","Authentication","UserManagers",function($scope,$stateParams,$location,Authentication,UserManagers){$scope.authentication=Authentication,$scope.go=function(path){$location.path(path)},$scope.create=function(){var userManager=new UserManagers({name:this.name,username:this.username,password:this.password,email:this.email});userManager.$save(function(response){$location.path("user-managers/"+response.id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(userManager){if(userManager){userManager.$remove();for(var i in $scope.userManagers)$scope.userManagers[i]===userManager&&$scope.userManagers.splice(i,1);$location.path("user-managers")}else $scope.userManager.$remove(function(){$location.path("user-managers")})},$scope.update=function(){var userManager=$scope.userManager;userManager.$update(function(){$location.path("user-managers/"+userManager._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.userManagers=UserManagers.query()},$scope.findOne=function(){$scope.userManager=UserManagers.get({userManagerId:$stateParams.userManagerId})}}]),angular.module("user-managers").factory("UserManagers",["$resource",function($resource){return $resource("user-managers/:userManagerId",{userManagerId:"@id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/profile.client.view.html"}).state("edit-profile",{url:"/settings/edit-profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("user-managers")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);